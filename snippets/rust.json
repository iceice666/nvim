{
    "allow": {
        "prefix": "allow",
        "body": ["#![allow(${1})]"],
        "description": "#![allow(…)]"
    },
    "deny": {
        "prefix": "deny",
        "body": ["#![deny(${1})]"],
        "description": "#![deny(…)]"
    },
    "warn": {
        "prefix": "warn",
        "body": ["#![warn(${1})]"],
        "description": "#![warn(…)]"
    },
    "no_std": {
        "prefix": "no_std",
        "body": ["#![no_std]"],
        "description": "#![no_std]"
    },
    "no_core": {
        "prefix": "no_core",
        "body": ["#![no_core]"],
        "description": "#![no_core]"
    },
    "feature": {
        "prefix": "feature",
        "body": ["#![feature(${1})]"],
        "description": "#![feature(…)]"
    },
    "macro_use": {
        "prefix": "macro_use",
        "body": ["#[macro_use(${1})]"],
        "description": "#[macro_use(…)]"
    },
    "repr": {
        "prefix": "repr",
        "body": ["#[repr(${1})]"],
        "description": "#[repr(…)]"
    },
    "cfg": {
        "prefix": "cfg",
        "body": ["#[cfg(${1})]"],
        "description": "#[cfg(…)]"
    },
    "cfg_attr": {
        "prefix": "cfg_attr",
        "body": ["#[cfg_attr(${1}, ${2})]"],
        "description": "#[cfg_attr(…, …)]"
    },
    "bench": {
        "prefix": "bench",
        "body": [
            "#[bench]",
            "fn ${1:name}(b: &mut test::Bencher) {",
            "    ${2:b.iter(|| ${3:/* benchmark code */})}",
            "}"
        ],
        "description": "#[bench]"
    },
    "const": {
        "prefix": "const",
        "body": ["const ${1:CONST}: ${2:Type} = ${4:init};"],
        "description": "const …: … = …;"
    },
    "derive": {
        "prefix": "derive",
        "body": ["#[derive(${1})]"],
        "description": "#[derive(…)]"
    },
    "enum": {
        "prefix": "enum",
        "body": [
            "#[derive(Debug)]",
            "enum ${1:Name} {",
            "    ${2:Variant1},",
            "    ${3:Variant2},",
            "}"
        ],
        "description": "enum … { … }"
    },
    "extern-crate": {
        "prefix": "extern-crate",
        "body": ["extern crate ${1:name};"],
        "description": "extern crate …;"
    },
    "extern-fn": {
        "prefix": "extern-fn",
        "body": [
            "extern \"C\" fn ${1:name}(${2:arg}: ${3:Type}) -> ${4:RetType} {",
            "    ${5:// add code here}",
            "}"
        ],
        "description": "extern \"C\" fn …(…) { … }"
    },
    "extern-mod": {
        "prefix": "extern-mod",
        "body": ["extern \"C\" {", "    ${2:// add code here}", "}"],
        "description": "extern \"C\" { … }"
    },
    "pfn": {
        "prefix": "pfn",
        "body": [
            "pub fn ${1:name}(${2:arg}: ${3:Type}) -> ${4:RetType} {",
            "    ${5:todo!();}",
            "}"
        ],
        "description": "pub fn …(…) { … }"
    },
    "fn": {
        "prefix": "fn",
        "body": [
            "fn ${1:name}(${2:arg}: ${3:Type}) -> ${4:RetType} {",
            "    ${5:todo!();}",
            "}"
        ],
        "description": "fn …(…) { … }"
    },
    "for": {
        "prefix": "for",
        "body": [
            "for ${1:pat} in ${2:expr} {",
            "    ${3:todo!();}",
            "}"
        ],
        "description": "for … in … { … }"
    },
    "if-let": {
        "prefix": "if let",
        "body": [
            "if let ${1:Some(pat)} = ${2:expr} {",
            "    ${0:todo!();}",
            "}"
        ],
        "description": "if let … = … { … }"
    },
    "if": {
        "prefix": "if",
        "body": [
          "if ${1:condition} {",
          "    ${2:todo!();}",
          "}"
        ],
        "description": "if … { … }"
    },
    "impl-trait": {
        "prefix": "impl-trait",
        "body": [
            "impl ${1:Trait} for ${2:Type} {",
            "    ${3:// add code here}",
            "}"
        ],
        "description": "impl … for … { … }"
    },
    "inline": {
        "prefix": "inline",
        "body": ["#![inline]"],
        "description": "#![inline]"
    },
    "inline-fn": {
        "prefix": "inline-fn",
        "body": [
            "#[inline]",
            "pub fn ${1:name}() {",
            "    ${2:todo!();}",
            "}"
        ],
        "description": "inlined function"
    },
    "macro_rules": {
        "prefix": "macro_rules",
        "body": [
          "macro_rules! ${1:name} {",
          "    (${2}) => (${3})",
          "}"
        ],
        "description": "macro_rules! … { … }"
    },
    "main": {
        "prefix": "main",
        "body": [
          "fn main() -> Result<(), Box<dyn Error>> {",
          "    ${1:todo!();}",
          "}"
        ],
        "description": "fn main() { … }"
    },
    "match": {
        "prefix": "match",
        "body": [
            "match ${1:expr} {}"
        ],
        "description": "match … { … }"
    },
    "mod-block": {
        "prefix": "mod-block",
        "body": [
          "mod ${1:name} {",
          "    ${2:// add code here}",
          "}"
        ],
        "description": "mod … { … }"
    },
    "static": {
        "prefix": "static",
        "body": ["static ${1:STATIC}: ${2:Type} = ${4:init};"],
        "description": "static …: … = …;"
    },
    "struct-tuple": {
        "prefix": "struct-tuple",
        "body": ["struct ${1:Name}(${2:Type});"],
        "description": "struct …(…);"
    },
    "struct-unit": {
        "prefix": "struct-unit",
        "body": ["struct ${1:Name};"],
        "description": "struct …;"
    },
    "struct": {
        "prefix": "struct",
        "body": [
            "#[derive(Debug)]",
            "struct ${1:Name} {",
            "    ${2:field}: ${3:Type}",
            "}"
        ],
        "description": "struct … { … }"
    },
    "modtest": {
        "prefix": "modtest",
        "body": [
            "#[cfg(test)]",
            "mod test {",
            "    use super::*;",
            "    #[test]",
            "    fn test_${1:name}() {",
            "        ${2:todo!();}",
            "    }",
            "}"
        ],
        "description": "test module"
    },
    "test": {
        "prefix": "test",
        "body": [
            "#[test]",
            "fn test_${1:name}() {",
            "    ${2:todo!();}",
            "}"
        ],
        "description": "test"
    },
    "asynctest": {
        "prefix": "asynctest",
        "body": [
            "#[tokio::test]",
            "fn test_${1:name}() {",
            "    ${2:todo!();}",
            "}"
        ],
        "description": "tokio async test"
    },
    "trait": {
        "prefix": "trait",
        "body": [
          "trait ${1:Name} {",
          "    ${2:// add code here}",
          "}",
          ""
        ],
        "description": "trait … { … }"
    },
    "type": {
        "prefix": "type",
        "body": ["type ${1:Alias} = ${2:Type};"],
        "description": "type … = …;"
    },
    "typeanyhow": {
        "prefix": "type",
        "body": ["type AnyResult<T = ()> = anyhow::Result<T>;"],
        "description": "type … = …;"
    },
    "anyhow":{
        "prefix": "anyhow",
        "body": ["Err(anyhow::anyhow!(\"${1:msg}\"))"],
        "description": "anyhow macro"
    },
    "anyresult":{
        "prefix": "anyresult",
        "body": ["AnyResult<${1:T}>"],
        "description": "AnyResult"
    },
    "while-let": {
        "prefix": "while let",
        "body": [
            "while let ${1:Some(pat)} = ${2:expr} {",
            "    ${0:todo!();}",
            "}"
        ],
        "description": "while let … = … { … }"
    },
    "while": {
        "prefix": "while",
        "body": [
          "while ${1:condition} {",
          "    ${2:todo!();}",
          "}"
        ],
        "description": "while … { … }"
    }
}
